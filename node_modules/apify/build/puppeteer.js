'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.launchPuppeteer = undefined;

var _utils = require('apify-client/build/utils');

var _utils2 = require('./utils');

var _constants = require('./constants');

/* global process, require */

/**
 * @memberof module:Apify
 * @function
 * @description <p>Launches headless Chrome using Puppeteer pre-configured to work with the Apify Actor platform.
 * The function has the same argument and return value as `puppeteer.launch()`.
 * See {@link https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#puppeteerlaunchoptions|Puppeteer documentation} for more details.</p>
 * <p>The `launchPuppeteer()` function alters the following Puppeteer options:
 * <ul>
 *    <li>Passes the value of the `APIFY_HEADLESS` environment variable to the `headless` option,
 *        unless it was already defined by the caller.</li>
 *    <li>Takes the `proxyUrl` option and adds it to `env` under the `HTTPS_PROXY` or `HTTP_PROXY` key.</li>
 *    <li>Adds `--no-sandbox` to `args` to enable running headless Chrome in a Docker container on the Actor platform.</li>
 * </ul>
 * </p>
 * @param options Optional settings passed to `puppeteer.launch()`.
 * Additionally, the options can contain the `proxyUrl` property to specify a proxy server
 * (e.g. `http://example.com:1234`).
 * @returns {Promise} Promise object returned by `puppeteer.launch()`
 */
var launchPuppeteer = exports.launchPuppeteer = function launchPuppeteer() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var puppeteer = void 0;

    try {
        // This is an optional dependency because it is quite large, only require it when used (ie. image with Chrome)
        puppeteer = require('puppeteer'); // eslint-disable-line global-require
    } catch (err) {
        if (err.code === 'MODULE_NOT_FOUND') err.message = 'Cannot find module \'puppeteer\'. Did you choose the wrong docker image?';

        throw err;
    }

    (0, _utils.checkParamOrThrow)(opts, 'opts', 'Object');
    (0, _utils.checkParamOrThrow)(opts.env, 'opts.env', 'Maybe Object');
    (0, _utils.checkParamOrThrow)(opts.args, 'opts.args', 'Maybe [String]');

    var proxyUrl = opts.proxyUrl;


    if (proxyUrl) {
        (0, _utils.checkParamOrThrow)(proxyUrl, 'opts.proxyUrl', 'String');

        var _parseUrl = (0, _utils2.parseUrl)(proxyUrl),
            host = _parseUrl.host,
            port = _parseUrl.port,
            protocol = _parseUrl.protocol,
            password = _parseUrl.password;

        if (!host || !port) throw new Error('Invalid "proxyUrl" option: the URL must contain hostname and port number.');
        if (protocol !== 'http:' && protocol !== 'https:') throw new Error('Invalid "proxyUrl" option: protocol must be http or https.');
        if (password) throw new Error('Invalid "proxyUrl" option: password is not currently supported.');

        var proxyVarName = proxyUrl.startsWith('https') ? 'HTTPS_PROXY' : 'HTTP_PROXY';
        opts.env = opts.env || {};
        opts.env[proxyVarName] = opts.proxyUrl;
    }

    opts.args = opts.args || [];
    opts.args.push('--no-sandbox');

    if (opts.headless === undefined || opts.headless === null) opts.headless = !!process.env[_constants.ENV_VARS.HEADLESS];

    return puppeteer.launch(opts);
};